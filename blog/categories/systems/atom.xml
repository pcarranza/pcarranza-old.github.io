<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Systems | Pablo C]]></title>
  <link href="http://pcarranza.github.io/blog/categories/systems/atom.xml" rel="self"/>
  <link href="http://pcarranza.github.io/"/>
  <updated>2015-08-11T18:05:24-04:00</updated>
  <id>http://pcarranza.github.io/</id>
  <author>
    <name><![CDATA[Pablo Carranza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding MySql Degradation]]></title>
    <link href="http://pcarranza.github.io/blog/2014/12/29/understanding-mysql-degradation/"/>
    <updated>2014-12-29T13:45:17-05:00</updated>
    <id>http://pcarranza.github.io/blog/2014/12/29/understanding-mysql-degradation</id>
    <content type="html"><![CDATA[<p>This post is neither about magical configurations, nor about baremetal IO ops,
nor about if you should move your database server to SSD. Neither it is about
fine tuning a MySQL server configuration, not even about how MySQL works as a
cluster.</p>

<p>This is about a single database server, this is about understanding how a MySQL
database works to lay the things in a way that it just works better. Bear with
me on this quick trip into MySQL performance degradation, we only need one
database, a few million records, and one query.</p>

<!--more-->


<h2>The problem</h2>

<p>This all started a few years ago, with one customer complaining about a page
being slow. Initially from our developer point of view we thought that the issue
was as simple as a network problem. But a bit later, another user complained
about the same thing, and then another, so we started paying attention.</p>

<p>We did not had enough metrics, and most importantly, we did not <a href="http://blog.sriramnarayan.com/2011/04/dashboards-promote-ignorance.html">had the right metrics</a>.</p>

<p>Our <em>way too broad</em> green dashboard was not showing anything in particular,
regular load for a busy server, nothing that would trigger an alarm; later
on I dicovered that we weren&rsquo;t looking at the right place.</p>

<p>In out particular case we lacked one simple metric: <strong>request time</strong>. We had no idea
how much time was the average time a request took, nor the p99, so we were just blind. If you
don&rsquo;t know what I am talking about, do yourself a favor and go see
<a href="https://www.youtube.com/watch?v=czes-oa0yik">this talk</a> right now</p>

<p>As a last resort, we enabled <a href="http://dev.mysql.com/doc/refman/5.1/en/slow-query-log.html">logging slow queries</a> in the
MySQL server.</p>

<p>And we got many queries, some of those did not made any sense, but some did. One
in particular was really slow, and was related to the slow the page.</p>

<p>I took that query to my development server, with an anonymized data set and less
resources in general, I ran it once, it took a lot of time, I ran it again, it took
less than a second.</p>

<p>I blamed the query cache, so I disabled it, restarted the service and ran it
again, this are the results:</p>

<p>``` mysql
select id, client_id, status, code, created, last_modified
from document
where status &lt;> &lsquo;DRAFT&rsquo;</p>

<pre><code>and code &gt;= '2013-B-0000150730' 
and kind = 'BILL' 
and company_id = 18 
</code></pre>

<p>order by code asc limit 5\G</p>

<hr />

<p>5 rows in set (21.97 sec)
```</p>

<p>And the second time:
``` sql</p>

<hr />

<p>5 rows in set (0.81 sec)
```</p>

<p>I was puzzled.</p>

<h3>A note on the data model</h3>

<p>The code field is composed by year, the first letter of the kind and then an
unique ever increasing number, independent by year, kind and company. Don&rsquo;t try
to argue with the model, it is just the way it was.</p>

<h2>The understanding process</h2>

<p>The first thing to do to understand what MySQL is doing with a query is to ask it
to explain what he plans to do: the query plan</p>

<p>``` mysql
explain extended <the query>
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 1. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>       id: 1
</code></pre>

<p>  select_type: SIMPLE</p>

<pre><code>    table: document
     type: range
</code></pre>

<p>possible_keys: company_id_idx,kind_idx,status_idx,code_idx</p>

<pre><code>      key: code_idx
  key_len: 62
      ref: NULL
     rows: 1776463
 filtered: 100.00
    Extra: Using where
</code></pre>

<p>```</p>

<p>To start somewhere, it looks like 1.7M out of 5M rows (the whole dataset) are
going to be examined; it is also saying that the query is of range type which
makes sense as we are filtering for <code>code &gt;= '2013-B-0000150730'</code></p>

<p>But this is the first common misconception we ran into: we thought that MySQL
would use many indexes to resolve this query, but it was only using one: the
index on the <code>code</code> field.</p>

<p>Initially it makes some sense as that is one of the fields we were using to
filter for, but there are many others mentioned there, those will just not be
used.</p>

<p>The way MySQL picks what index to use is by checking the relevance and the
cardinality of it. If we ask MySQL to explain how it <em>sees</em> the indexes we can
get valuable information.</p>

<p>``` mysql</p>

<blockquote><p>show index from document \G
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 1. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
</code></pre>

<p>   Non_unique: 0</p>

<pre><code> Key_name: PRIMARY
</code></pre>

<p> Seq_in_index: 1
  Column_name: id
  Cardinality: 3552927
   Index_type: BTREE
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 2. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: company_id_idx
</code></pre>

<p>  Column_name: company_id
  Cardinality: 755
   Index_type: BTREE
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 3. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: kind_idx
</code></pre>

<p>  Column_name: kind
  Cardinality: 17
   Index_type: BTREE
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 4. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: status_idx
</code></pre>

<p>  Column_name: status
  Cardinality: 17
   Index_type: BTREE
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 5. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: code_idx
</code></pre>

<p>  Column_name: code
  Cardinality: 3552927
   Index_type: BTREE
```</p></blockquote>

<p>The index on the code field is the one with the higher
<a href="http://en.wikipedia.org/wiki/Cardinality_%28SQL_statements%29">cardinality</a>
that is referred in the query, in a nutshell: a low cardinality makes the index
more coarse grained: more rows in the same bucket, in some cases this makes an
index useless, in some cases that is just what we want.</p>

<p>In the query we are also asking MySQL to sort by code, so it makes total sense
to use that index because rows will be read in order, there is no need to sort
afterwards.</p>

<p>Lets see what happens when we are actually running the query</p>

<h2>The MySQL profiler</h2>

<p>MySQL contains at least 2 great tools that can be used to determine what is
going on, one is to get the global state of the server by using
<a href="http://dev.mysql.com/doc/refman/5.1/en/innodb-monitors.html"><code>show engine innodb status</code></a>,
and the other one is the
<a href="http://dev.mysql.com/doc/refman/5.1/en/show-profile.html">profiler</a>.</p>

<p>The former is interesting to get general server status information, and is great
data to have. The latter are real metrics an measurements that are gathered
by MySQL while executing queries. This can provide a lot of insight of where the
time is going, and can hint why a query is slow.</p>

<p>After restarting the service to get a cold execution I enabled profiling and ran
the query again, two times.</p>

<p>``` mysql</p>

<blockquote><p>set profiling = 1;
Query OK, 0 rows affected (0.00 sec)</p>

<p><the query>;
5 rows in set (21.97 sec)</p>

<p><the query again>;
5 rows in set (0.81 sec)
```</p></blockquote>

<p>Now we have 2 execution samples of the same query profiled by MySQL, lets see
what is happening there and how they differ from each other.</p>

<p>``` mysql</p>

<blockquote><p>show profile CPU, CONTEXT SWITCHES, PAGE FAULTS for query 1;
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Status               | Duration  | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Page_faults_major | Page_faults_minor |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| starting             |  0.000075 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| checking permissions |  0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Opening tables       |  0.000022 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| System lock          |  0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| init                 |  0.000026 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| optimizing           |  0.000021 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| statistics           |  0.378110 | 0.004000 |   0.004000 |                63 |                   0 |                 0 |               226 |
| preparing            |  0.000038 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| executing            |  0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sorting result       |  0.000048 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 3 |
| Sending data         | 21.590753 | 3.760000 |   0.308000 |             14794 |                 854 |                 0 |            136593 |
| end                  |  0.000014 | 0.000000 |   0.000000 |                 1 |                   0 |                 0 |                 0 |
| query end            |  0.000005 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| closing tables       |  0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| freeing items        |  0.000017 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| logging slow query   |  0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| logging slow query   |  0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| cleaning up          |  0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>show profile CPU, CONTEXT SWITCHES, PAGE FAULTS for query 2;
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Status               | Duration | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Page_faults_major | Page_faults_minor |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| starting             | 0.000072 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| checking permissions | 0.000006 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Opening tables       | 0.000016 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| System lock          | 0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| init                 | 0.000027 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| optimizing           | 0.000015 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| statistics           | 0.000141 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| preparing            | 0.000020 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| executing            | 0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sorting result       | 0.000026 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sending data         | 0.804630 | 0.804000 |   0.000000 |                19 |                 105 |                 0 |                36 |
| end                  | 0.000015 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| query end            | 0.000005 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| closing tables       | 0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| freeing items        | 0.000023 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| logging slow query   | 0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| cleaning up          | 0.000006 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p></blockquote>

<p>This is when things gets interesting: the times goes into <code>sending data</code></p>

<p>From <a href="http://dev.mysql.com/doc/refman/5.1/en/general-thread-states.html">MySQL documentation page</a>:</p>

<blockquote><p>The thread is reading and processing rows for a SELECT statement, and sending
data to the client. Because operations occurring during this state tend to
perform large amounts of disk access (reads), it is often the longest-running
state over the lifetime of a given query.</p></blockquote>

<p>The time goes in actually executing the query, bringing the data from the disk
and pushing this data to the client.</p>

<p>But besides the time used for sending this data, there is a really interesting
part in the right side of the profiling table:
<a href="http://en.wikipedia.org/wiki/Context_switch">context switches</a> and
<a href="http://en.wikipedia.org/wiki/Page_fault">page faults</a>.</p>

<p>What MySQL is telling us is that it required context switching and page
faulting with some system time to resolve the query the first time, but not
that much the second time.</p>

<p>This was a surprise to me, because I usually think that things like
context switches and page faults are OS businesses. Here I discovered
that a MySQL server acts like an OS by itself: it controls context switches,
and it also manages its own memory allocation, pulling and pushing pages
from disk as needed.</p>

<p>But what is this data it is bringing from the disk? What matters more to any
database server: indexes.</p>

<h2>Size matters</h2>

<p>Initially I was running queries on a server where indexes almost fit in memory,
I know this because I checked using a query as simple as this:</p>

<p>``` mysql
SELECT sum(T.DATA_LENGTH) as DATA_SIZE_IN_BYTES,</p>

<pre><code>CONCAT(format(sum(T.DATA_LENGTH)/pow(2,20), 2), 'mb') as DATA_SIZE_HR,
sum(T.INDEX_LENGTH) as INDEXES_SIZE_IN_BYTES,
CONCAT(format(sum(T.INDEX_LENGTH)/pow(2,20), 2), 'mb') as INDEX_SIZE_HR,
M.MEMORY_SIZE as MEMORY_SIZE_IN_BYTES, 
CONCAT(format((M.MEMORY_SIZE)/pow(2,20), 2),'mb') AS AVAILABLE_MEMORY_HR,
CONCAT(format((sum(T.INDEX_LENGTH)/sum(T.DATA_LENGTH)) * 100, 2), '%') AS INDEX_TO_DATA_RATIO,
CONCAT(format((sum(T.INDEX_LENGTH)/M.MEMORY_SIZE) * 100, 2), '%') as USED_MEMORY_RATIO
</code></pre>

<p>FROM information_schema.tables as T,</p>

<pre><code>(select VARIABLE_VALUE AS MEMORY_SIZE 
from information_schema.GLOBAL_VARIABLES 
where VARIABLE_NAME LIKE 'INNODB_BUFFER_POOL_SIZE') as M
</code></pre>

<p>WHERE table_schema = &lsquo;datasite&rsquo; AND ENGINE = &lsquo;InnoDB&rsquo;
```</p>

<p>This query will deliver a result like this with my 5M rows data sample:</p>

<p>``` mysql for the whole schema
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 1. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>
   DATA_SIZE_IN_BYTES: 1736884224</p>

<pre><code>     DATA_SIZE_HR: 1,656.42mb
</code></pre>

<p>INDEXES_SIZE_IN_BYTES: 937213952</p>

<pre><code>    INDEX_SIZE_HR: 893.80mb
</code></pre>

<p> MEMORY_SIZE_IN_BYTES: 767557632
  AVAILABLE_MEMORY_HR: 732.00mb
  INDEX_TO_DATA_RATIO: 53.96%</p>

<pre><code>USED_MEMORY_RATIO: 122.10%
</code></pre>

<p>```</p>

<p>or</p>

<p>``` mysql for a specific table
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 1. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>       TABLE_NAME: document
</code></pre>

<p>   DATA_SIZE_IN_BYTES: 451821568</p>

<pre><code>     DATA_SIZE_HR: 430.89mb
</code></pre>

<p>INDEXES_SIZE_IN_BYTES: 823754752</p>

<pre><code>    INDEX_SIZE_HR: 785.59mb
</code></pre>

<p> MEMORY_SIZE_IN_BYTES: 767557632
  AVAILABLE_MEMORY_HR: 732.00mb
  INDEX_TO_DATA_RATIO: 182.32%</p>

<pre><code>USED_MEMORY_RATIO: 107.32%
</code></pre>

<p>```</p>

<p>So, out of 732mb available ram, 785mb are going to be used for indexes.</p>

<p>This is not very precise, as it is built using allocated files space in the
mysql schema filesystem, but is good enough to get a rough idea of your data set
and how is it distributed. Bear in mind that this does not consider index
fragmentation so a recently restored dump will be in much better shape than a
heavy written table and index.</p>

<h2>Understanding how indexes work</h2>

<p>In MySQL an index is usually a <a href="http://en.wikipedia.org/wiki/B-tree">B-Tree</a>,
The key point of a B-Tree is that is can be stored in disk as many chunks, each
one being the same size, and each of these chunks can be called <code>page</code></p>

<p>When the query planner decided to use the <code>code</code> index, it selected an index
with a cardinality close to the primary key, so it was forced to traverse this
tree to find the range of elements that match the query, each row selected
from the index was then tested for the rest of the filter constraint: does it
belong to the right company? is it the right kind? etc.</p>

<p>This is showed by the <code>explain extended</code> query plan, that query plan is
basically saying what index is going to be used, and then that each row is going
to be filtered by the where clause.</p>

<p>That query plan is also saying that it will test 1776463 rows to return 5.</p>

<p>This index, and all the rest of the indexes in the table use something around
780mb; after running the query, the allocated memory allocated is&hellip;
<em>surprise</em>: 780mb in 29762 pages</p>

<h2>``` mysql</h2>

<h2>BUFFER POOL AND MEMORY</h2>

<p>Total memory allocated 785547264; in additional pool allocated 0
Dictionary memory allocated 87339
Buffer pool size   46847
Free buffers       11842
Database pages     29762
Old database pages 11006
```</p>

<p>The second time we ran the query, those index pages were already in memory, so
traversing them was <em>only</em> 0.8 seconds. This is linear time execution:
traversing the tree in memory, no system time as no file was read, it is all
userspace time, CPU bound.</p>

<p>The only difference between the first and the second query is that the second
one has all the indexes in memory, while the first one needs to load them from
disk: that is what a MySQL server warmup is.</p>

<p>Now imagine a server with indexes bigger than the available memory, and many
users requesting different chunks of the same index at the same time, a heavy
load situation.
MySQL will do its best to deliver results, but it will need to pull chunks from
disk to then dealocate them to make room for other chunks and keep them coming
and going constantly.</p>

<p>The OS will not see anything of this, well, maybe it will see constant IO, but
how can you determine at the OS level if what the MySQL is doing is ok or not?
you will need to go check in the innodb status to see if there is
<a href="http://www.percona.com/blog/2011/07/28/how-innodb-contention-may-manifest-itself/">contention</a>.
Because the OS will only see <code>read</code> system calls as files are already opened,
and that is expected to happen in a database server with heavy read load.</p>

<h2>Let&rsquo;s play</h2>

<p>Historically understanding how indexes work was always a
<a href="http://en.wikipedia.org/wiki/Database_administrator">DBA</a> thing. If you ever
look for <code>composite index</code> information you may find some replies in
<a href="http://stackoverflow.com/questions/1823685/when-should-i-use-a-composite-index">stackoverflow</a>,
and some general comments about what are they for, but there is usually no
real world examples that explain how they work besides
<a href="http://dev.mysql.com/doc/refman/5.0/en/multiple-column-indexes.html">this</a>
MySQL page, or at least nothing I found by that time.</p>

<p>In a nutshell, a composite index can be described as a tree of trees.</p>

<p>This means that when we use many fields for an index we are first going to
create a tree for that initial field, and the value bucket of each key is going
to be another tree where the same thing will happen for the second field, and
so on, until we have the row identifiers.</p>

<p>So, if we create a composite index in this model, for example, using
<code>company_id</code> and then <code>code</code>, we will have one tree where we will search by the
company id first, and then on the second tree we will search by all the codes
that belong to that company.</p>

<p>The most interesting part of all this is that we are going to fragment the index
in many blocks, making this second <code>code</code> index <em>smaller</em> from the loading and
memory usage point of view.</p>

<p>Let&rsquo;s try that</p>

<p>``` mysql</p>

<blockquote><p>ALTER TABLE document DROP INDEX code_idx,
ADD INDEX <code>company_code</code> (<code>company_id</code>, <code>code</code>);</p>

<p>show index from document \G
&hellip;
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 8. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: company_code
</code></pre>

<p> Seq_in_index: 1
  Column_name: company_id
  Cardinality: 18
   Index_type: BTREE
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 9. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
</code></pre>

<p>   Non_unique: 1</p>

<pre><code> Key_name: company_code
</code></pre>

<p> Seq_in_index: 2
  Column_name: code
  Cardinality: 3552927
   Index_type: BTREE</p>

<p>explain extended <the query>
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 1. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>       id: 1
</code></pre>

<p>  select_type: SIMPLE</p>

<pre><code>    table: document
     type: ref
</code></pre>

<p>possible_keys: kind_idx,status_idx,company_code</p>

<pre><code>      key: company_code
  key_len: 4
      ref: const
     rows: 1062780
 filtered: 100.00
    Extra: Using where
</code></pre>

<p>```</p></blockquote>

<p>The query plan looks a bit different, the key size is much smaller because it is
only counting on the first part of the index, which is an integer value, but the
row count is 1M records instead of 1.7M, also the <em>join type</em> is
<a href="http://dev.mysql.com/doc/refman/5.1/en/explain-output.html#jointype_ref">ref</a>
and then
<a href="http://dev.mysql.com/doc/refman/5.1/en/explain-output.html#jointype_const">const</a>,
this is way better.</p>

<p>Lets run it, first: <code>5 rows in set (4.11 sec)</code> and second <code>5 rows in set (0.93 sec)</code></p>

<p>And the profiling results are:</p>

<p>``` mysql
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Status               | Duration | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Page_faults_major | Page_faults_minor |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| starting             | 0.000083 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| checking permissions | 0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Opening tables       | 0.000034 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| System lock          | 0.000009 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| init                 | 0.000030 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| optimizing           | 0.000017 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| statistics           | 0.171065 | 0.000000 |   0.004000 |                37 |                   0 |                 0 |               168 |
| preparing            | 0.000034 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| executing            | 0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sorting result       | 0.000005 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sending data         | 3.940003 | 1.796000 |   0.116000 |              7350 |                  69 |                 0 |             41709 |
| end                  | 0.000018 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| query end            | 0.000006 | 0.000000 |   0.000000 |                 1 |                   0 |                 0 |                 0 |
| closing tables       | 0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| freeing items        | 0.000020 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| logging slow query   | 0.000002 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| cleaning up          | 0.000004 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Status               | Duration | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Page_faults_major | Page_faults_minor |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| starting             | 0.000077 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| checking permissions | 0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Opening tables       | 0.000017 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| System lock          | 0.000008 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| init                 | 0.000030 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| optimizing           | 0.000017 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| statistics           | 0.000135 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| preparing            | 0.000023 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| executing            | 0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sorting result       | 0.000004 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sending data         | 0.933226 | 0.940000 |   0.000000 |                21 |                   2 |                 0 |                 0 |
| end                  | 0.000015 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| query end            | 0.000005 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| closing tables       | 0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| freeing items        | 0.000023 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| logging slow query   | 0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| cleaning up          | 0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p>

<p>We cut 17 seconds from a cold server query execution just by changing <strong>one</strong>
index, not bad.</p>

<p>I think we can do it better, why don&rsquo;t we add the status field to the index?
lets try that and see what happens</p>

<p>``` mysql</p>

<blockquote><p>ALTER TABLE document</p>

<pre><code>DROP INDEX `company_code`, 
DROP INDEX `status_idx`, 
ADD INDEX `company_status_code` (`company_id`, `status`, `code`);
</code></pre>

<p>show index from document \G
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 7. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: company_status_code
</code></pre>

<p> Seq_in_index: 1
  Column_name: company_id
  Cardinality: 18
   Index_type: BTREE
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 8. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: company_status_code
</code></pre>

<p> Seq_in_index: 2
  Column_name: status
  Cardinality: 18
   Index_type: BTREE
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 9. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: company_status_code
</code></pre>

<p> Seq_in_index: 3
  Column_name: code
  Cardinality: 3556369
   Index_type: BTREE</p>

<p>explain extended <the query>
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 1. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>       id: 1
</code></pre>

<p>  select_type: SIMPLE</p>

<pre><code>    table: document
     type: ref
</code></pre>

<p>possible_keys: kind_idx,company_status_code</p>

<pre><code>      key: kind_idx
  key_len: 32
      ref: const
     rows: 1778184
 filtered: 100.00
    Extra: Using where; Using filesort
</code></pre>

<p>```</p></blockquote>

<p>This query is going to be really different, MySQL is not picking the index we
created, I&rsquo;m guessing this is because we are filtering the second index field
by inequality, but in any case, the interesting part here is that the query
plan states it will need to sort the result, lets see what happens when MySQL
has to sort the result.</p>

<p>First execution is <code>5 rows in set (12.17 sec)</code> and second execution is <code>5 rows
in set (2.91 sec)</code></p>

<p>The profiling goes like this</p>

<p>``` mysql
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Status               | Duration  | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Page_faults_major | Page_faults_minor |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| starting             |  0.000102 | 0.004000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| checking permissions |  0.000008 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Opening tables       |  0.000019 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| System lock          |  0.000009 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| init                 |  0.000031 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| optimizing           |  0.000019 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| statistics           |  0.000132 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| preparing            |  0.000025 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| executing            |  0.000004 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sorting result       | 12.174824 | 5.580000 |   0.368000 |             21405 |                  95 |                 3 |            138037 |
| Sending data         |  0.000053 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| end                  |  0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| query end            |  0.000006 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| closing tables       |  0.000009 | 0.000000 |   0.000000 |                 1 |                   0 |                 0 |                 0 |
| freeing items        |  0.000022 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| logging slow query   |  0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| logging slow query   |  0.000002 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| cleaning up          |  0.000004 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Status               | Duration | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Page_faults_major | Page_faults_minor |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| starting             | 0.000094 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| checking permissions | 0.000008 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Opening tables       | 0.000019 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| System lock          | 0.000016 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| init                 | 0.000039 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| optimizing           | 0.000020 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| statistics           | 0.000128 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| preparing            | 0.000028 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 1 |
| executing            | 0.000004 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sorting result       | 2.914472 | 2.924000 |   0.000000 |                69 |                   5 |                 0 |               488 |
| Sending data         | 0.000045 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| end                  | 0.000005 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| query end            | 0.000005 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| closing tables       | 0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| freeing items        | 0.000016 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| logging slow query   | 0.000002 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| cleaning up          | 0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p>

<p>Two things are interesting here, the first is that the time goes in <code>Sorting
result</code> both times, this is expected, but the first execution is also including
the index loading time into the sorting, so the sorting operation is actually
executing the query and loading all the required index pages.</p>

<p>The second, sorting is slow, it is much more efficient to load records in order
from the index even when the index is bad than sorting on the fly.</p>

<p>As a final try, paying more attention to the shape of the query, lets create an
index that includes all the fields that are going to be an equality constant
comparison (<em>company id</em> and <em>kind</em>) and that ends with the range value (<em>code</em>)
and try again.</p>

<p>``` mysql</p>

<blockquote><p>ALTER TABLE document</p>

<pre><code>DROP INDEX `company_status_code`, 
ADD INDEX `status` (`status`), 
ADD INDEX `company_kind_code` (`company_id`, `kind`, `code`);
</code></pre>

<p>show index from document \G
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 8. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: company_kind_code
</code></pre>

<p> Seq_in_index: 1
  Column_name: company_id
  Cardinality: 18
   Index_type: BTREE
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 9. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: company_kind_code
</code></pre>

<p> Seq_in_index: 2
  Column_name: kind
  Cardinality: 18
   Index_type: BTREE
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 10. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>    Table: document
 Key_name: company_kind_code
</code></pre>

<p> Seq_in_index: 3
  Column_name: code
  Cardinality: 3553811
   Index_type: BTREE</p>

<p>explain extended <the query>
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 1. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>       id: 1
</code></pre>

<p>  select_type: SIMPLE</p>

<pre><code>    table: document
     type: range
</code></pre>

<p>possible_keys: kind_idx,status,company_kind_code</p>

<pre><code>      key: company_kind_code
  key_len: 98
      ref: NULL
     rows: 392820
 filtered: 100.00
    Extra: Using where
</code></pre>

<p>```</p></blockquote>

<p>This is quite different, the first thing to notice is that in this case the
query planner picked the right index this time.</p>

<p>The length of the key is 98 bytes, which is the full length of the composite
index key so all the index trees are going to be used.</p>

<p>And finally, the rows that are going to be examined lowered the number to almost
400.000 rows, which is a lot less, and is how many records exists for that
company and kind.</p>

<p>How does the same query run with this index? like this: first execution <code>5 rows
in set (0.03 sec)</code> and second execution <code>5 rows in set (0.00 sec)</code></p>

<p>Impressive, and this is how the profiling looks like:</p>

<p>``` mysql
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Status               | Duration | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Page_faults_major | Page_faults_minor |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| starting             | 0.000107 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| checking permissions | 0.000008 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Opening tables       | 0.000019 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| System lock          | 0.000009 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| init                 | 0.000031 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| optimizing           | 0.000018 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| statistics           | 0.000149 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| preparing            | 0.000021 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| executing            | 0.000004 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sorting result       | 0.000005 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sending data         | 0.035127 | 0.000000 |   0.000000 |                 1 |                   0 |                 0 |                15 |
| end                  | 0.000008 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| query end            | 0.000006 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| closing tables       | 0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| freeing items        | 0.000016 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| logging slow query   | 0.000004 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| cleaning up          | 0.000004 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+</p>

<p>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Status               | Duration | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Page_faults_major | Page_faults_minor |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| starting             | 0.000104 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| checking permissions | 0.000009 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Opening tables       | 0.000019 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| System lock          | 0.000008 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| init                 | 0.000031 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| optimizing           | 0.000018 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| statistics           | 0.000145 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| preparing            | 0.000021 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| executing            | 0.000003 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sorting result       | 0.000004 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| Sending data         | 0.000115 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| end                  | 0.000005 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| query end            | 0.000005 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| closing tables       | 0.000006 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| freeing items        | 0.000016 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| logging slow query   | 0.000007 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
| cleaning up          | 0.000005 | 0.000000 |   0.000000 |                 0 |                   0 |                 0 |                 0 |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p>

<p>The highlight is that the first query does some page loading from disk, but just
what it needs to resolve the query, this is because it can pick the company id
directly from the first index, then the kind from the second one, and finally
the codes are directly sorted and prefiltered by those prior indexes.</p>

<p>Then traversing the final tree is linear but finding the right starting point
in the set is a logarithmic operation, where each element will hardly be
discarded by the rest of the clauses, because by index shape it matches
already.</p>

<p>The number of operations required to resolve the query is drastically smaller
just because the data is correctly indexed for the query, everything falls in
place.</p>

<p>And what about memory usage?</p>

<p>If we take a second look at the <code>innodb engine state</code> we will see quite a
different image than before:</p>

<p><code>mysql
Total memory allocated 785547264; in additional pool allocated 0
Dictionary memory allocated 85291
Buffer pool size   46848
Free buffers       46298
Database pages     550
Old database pages 223
</code></p>

<p>Memory allocation is the same, it means that the MySQL already grabbed the
memory it needs to fully load the index, even being it a bit smaller now because
of the new shape (701.97mb).</p>

<p>But there is a big difference with the previous numbers, loaded pages is 550 now
whereas in the initial query it was 29762; this means that only the 1.84% of
index pages where needed to resolve the query, this is quite an optimization
without even changing the query.</p>

<h2>Final thoughts</h2>

<p>As I said initially, this was not about fine tuning MySQL, but about
understanding how it works. And this is not a silver bullet, but an intent to
explain what I learnt the hard way.</p>

<p>There is one more thing to say about this situation: with more memory, the
constant index loading gets greatly reduced, because there is more room to move
things around, but on the long run the problem would be the same, and eventually
what would happen is that we would hit a processor bounded limit before
exhausting memory.</p>

<p>If I have to say one thing about all this it is: mind your indexes, and mind
your queries, understand how you database server works and where the limits are.</p>

<p>The best you can do is setup your data in a way that the access to it is just
direct and natural, throwing more hardware at a problem is not always the
solution, it is just delaying the problem.</p>
]]></content>
  </entry>
  
</feed>
