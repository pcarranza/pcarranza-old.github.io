<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Book | Pablo C]]></title>
  <link href="http://pcarranza.github.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://pcarranza.github.io/"/>
  <updated>2015-05-04T18:20:06-04:00</updated>
  <id>http://pcarranza.github.io/</id>
  <author>
    <name><![CDATA[Pablo Carranza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Confident and Readable Code]]></title>
    <link href="http://pcarranza.github.io/blog/2014/10/12/confident-and-readable-code/"/>
    <updated>2014-10-12T14:27:15-04:00</updated>
    <id>http://pcarranza.github.io/blog/2014/10/12/confident-and-readable-code</id>
    <content type="html"><![CDATA[<p>The interesting thing about learning a new language is not learning the syntax but
stretching the mind into a new way of thinking. A new point of view which in the long run
will provide a much wider view and probably a new tool set which can then be ported back
into whatever you are doing right now.</p>

<!--more-->


<p>While learning ruby, I ended up reading <a href="http://confidentruby.com">Confident Ruby</a> by
<a href="http://avdi.org">Avdi Grimm</a></p>

<p>This book introduces the concept of timid code in which <em>&ldquo;the different parts of the method are
mixed up. Some input is collected, then some error handling, then some more input
collection, then work is done, and so on.&rdquo;</em></p>

<p>It also explains really well the idea of duck typing and object orientation in general,
that is, forget about asking for the type of an object (endless visitor patterns, or
worse: instance of) <strong>are you a duck?</strong>, but rather ask what the object can do: <strong>can you quack?</strong></p>

<p>Awesome, go get it, I learned a lot.</p>

<p>This book is a great follow up for <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship">clean code</a>
which is very Java-ish, and does not port so well to dynamic languages like ruby or python.</p>

<p>In Confident Ruby Avdi explains a lot of different patters that can be used to improve the
code focusing on the story: a method has to tell a story, and as such, it has to have 4
main blocks:</p>

<ul>
<li>collect input</li>
<li> perform work</li>
<li>deliver result</li>
<li>handle failures</li>
</ul>


<p>This is a really interesting structure to keep in mind, how messy is my code and how much
can I gain from writing my code in such way?</p>

<h2>A bit of self-criticism</h2>

<p>Check this gist:</p>

<p>``` ruby load_id_rsa.rb
def load_rsa_key(key)
  case key</p>

<pre><code>when nil
  raise ArgumentError, "Key cannot be nil"
when OpenSSL::PKey::PKey
  key
when String, File, IO
  text = read_file(key)
  if text =~ /^ssh-rsa/
    load_ssh_pubkey text
  else
    OpenSSL::PKey.read text
  end
end
</code></pre>

<p>end</p>

<p>private</p>

<p>def load_ssh_pubkey(text)
  rsakey = OpenSSL::PKey::RSA.new
  text.lines.each do |line|</p>

<pre><code>base64 = line.chomp.split[1]
keydata = base64.unpack("m").first
parts = Array.new
while (keydata.length &gt; 0)
  dlen = keydata[0, 4].bytes.inject(0) do |a, b|
    (a &lt;&lt; 8) + b
  end
  data = keydata[4, dlen]
  keydata = keydata[(dlen + 4)..-1]
  parts.push(data)
end
type = parts[0]
raise ArgumentError, "Unsupported key type #{type}" unless type == "ssh-rsa"
e = parts[1].bytes.inject do |a, b|
  (a &lt;&lt; 8) + b
end
n = parts[2].bytes.inject do |a, b|
  (a &lt;&lt; 8) + b
end
rsakey.n = n
rsakey.e = e
</code></pre>

<p>  end
  rsakey
end</p>

<p>def read_file file
  f = open_file file, &lsquo;r&rsquo;
  f.read
end</p>

<p>def open_file file, mode
  case file
  when String</p>

<pre><code>File.open file, mode
</code></pre>

<p>  when File, IO</p>

<pre><code>file
</code></pre>

<p>  else</p>

<pre><code>raise ArgumentError, "Invalid file #{file}"
</code></pre>

<p>  end
end
```</p>

<p>Focus on one function <code>load_ssh_pubkey</code>. It does a non trivial thing
(at least not for me) which is parsing and building a
RSA public key from an ssh key.</p>

<p>It works. But the problem here is that it is really hard to follow, the fact that the key
loading part is using a <em>while there is data to be read</em> does not state with clarity how long
the reading is going to happen.</p>

<p>There are many <em>byte.injects</em>, one that starts explicitly in 0, the others don&rsquo;t, but why?.
It is also assuming that more than one line is going to be read from the file/text, but the
function will return only the last one, which is not clearly stated.</p>

<p>It also checks if the key type is ssh-rsa, which is also checked in the caller
method, right in the middle of the parsing part, where work is being performed.</p>

<p>And then finally it builds the key to deliver it back.</p>

<p>It is really hard to follow. This code is not telling a story, it is surviving the input
data, delivering a key as a side effect if it is not killed in the way.</p>

<p>It is not clean code at all.</p>

<h2> Let&rsquo;s try again</h2>

<p>Extracted from the <em>rebuild</em> branch:</p>

<p>``` ruby ssh_key.rb
class SSHKey</p>

<p>  attr_reader :rsa</p>

<p>  def initialize(args={})</p>

<pre><code>source_file = args.fetch(:file) { fail ArgumentError, "Filename is required" }
source = if source_file.respond_to?(:read)
           source_file.read()
         else
           File.open(source_file) do |file|
             file.read()
           end
         end
@rsa = load_ssh_rsa_key(source)
@rsa ||= OpenSSL::PKey.read(source)
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def load_ssh_rsa_key(source)</p>

<pre><code>fail "DSA is not supported" if source =~ /^ssh-dsa/
return nil unless source =~ /^ssh-rsa/

keydata = decode_key(source)

rsakey = OpenSSL::PKey::RSA.new

skip_key_type_length = bytes_to_number(keydata.slice!(0, 4))
keydata.slice!(0, skip_key_type_length)

exponent_length = bytes_to_number(keydata.slice!(0, 4))
rsakey.e = bytes_to_number(keydata.slice!(0, exponent_length))

modulus_length = bytes_to_number(keydata.slice!(0, 4))
rsakey.n = bytes_to_number(keydata.slice!(0, modulus_length))

@rsa = rsakey
</code></pre>

<p>  end</p>

<p>  def decode_key(source)</p>

<pre><code>base64 = source.chomp.split[1]
keydata = base64.unpack("m").first
keydata
</code></pre>

<p>  end</p>

<p>  def bytes_to_number(data)</p>

<pre><code>data.bytes.inject(0) do |sum, byte|
  (sum &lt;&lt; 8) + byte
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>In this case I&rsquo;m trying to follow Avdi&rsquo;s ideas: readability and telling a story matters.
Given that I&rsquo;m in the process of turning this <a href="https://github.com/pcarranza/zssl">console tool</a>
into a gem that I can actually export I prefer creating an object that will know how to
handle this ssh key loading instead of a function in a module.</p>

<p>Let&rsquo;s check what goes on in the <code>load_ssh_rsa_key</code> method:</p>

<ul>
<li>It fails if it gets an DSA key because it is not supported.</li>
<li>The key is decoded in another method.</li>
<li>There are 3 chunks of data: key type, exponent and modulus.</li>
<li>The first 4 bytes are the size of the chunk data.</li>
<li>With that we can build an RSA key, and that is how it is stored in the ssh key file.</li>
</ul>


<p>Much, much better, I can understand what it does in one read, there are no surprises in that code.</p>

<p>Thanks Avdi.</p>
]]></content>
  </entry>
  
</feed>
