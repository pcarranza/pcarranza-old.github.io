<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Book | Pablo C]]></title>
  <link href="http://pcarranza.github.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://pcarranza.github.io/"/>
  <updated>2014-11-04T08:38:26-05:00</updated>
  <id>http://pcarranza.github.io/</id>
  <author>
    <name><![CDATA[Pablo C]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Confident and Readable Code]]></title>
    <link href="http://pcarranza.github.io/blog/2014/10/12/confident-and-readable-code/"/>
    <updated>2014-10-12T14:27:15-04:00</updated>
    <id>http://pcarranza.github.io/blog/2014/10/12/confident-and-readable-code</id>
    <content type="html"><![CDATA[<p>The interesting thing about learning a new language is not learning the syntax but
stretching the mind into a new way of thinking. A new point of view which in the long run
will provide a much wider view and probably a new tool set which can then be ported back
into whatever you are doing right now.</p>

<!--more-->


<p>While learning ruby, I ended up reading <a href="http://confidentruby.com">Confident Ruby</a> by
<a href="http://avdi.org">Avdi Grimm</a></p>

<p>This book introduces the concept of timid code in which <em>&ldquo;the different parts of the method are
mixed up. Some input is collected, then some error handling, then some more input
collection, then work is done, and so on.&rdquo;</em></p>

<p>It also explains really well the idea of duck typing and object orientation in general,
that is, forget about asking for the type of an object (endless visitor patterns, or
worse: instance of) <strong>are you a duck?</strong>, but rather ask what the object can do: <strong>can you quack?</strong></p>

<p>Awesome, go get it, I learned a lot.</p>

<p>This book is a great follow up for <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship">clean code</a>
which is very Java-ish, and does not port so well to dynamic languages like ruby or python.</p>

<p>In Confident Ruby Avdi explains a lot of different patters that can be used to improve the
code focusing on the story: a method has to tell a story, and as such, it has to have 4
main blocks:</p>

<ul>
<li>collect input</li>
<li> perform work</li>
<li>deliver result</li>
<li>handle failures</li>
</ul>


<p>This is a really interesting structure to keep in mind, how messy is my code and how much
can I gain from writing my code in such way?</p>

<h2>A bit of self-criticism</h2>

<p>Check this gist:</p>

<p><div><script src='https://gist.github.com/64f77136549ca7422574.js?file=load_id_rsa.rb'></script>
<noscript><pre><code>def load_rsa_key(key)
  case key
    when nil
      raise ArgumentError, &quot;Key cannot be nil&quot;
    when OpenSSL::PKey::PKey
      key
    when String, File, IO
      text = read_file(key)
      if text =~ /^ssh-rsa/
        load_ssh_pubkey text
      else
        OpenSSL::PKey.read text
      end
    end
end

private 

def load_ssh_pubkey(text)
  rsakey = OpenSSL::PKey::RSA.new
  text.lines.each do |line|
    base64 = line.chomp.split[1]
    keydata = base64.unpack(&quot;m&quot;).first
    parts = Array.new
    while (keydata.length &gt; 0)
      dlen = keydata[0, 4].bytes.inject(0) do |a, b|
        (a &lt;&lt; 8) + b
      end
      data = keydata[4, dlen]
      keydata = keydata[(dlen + 4)..-1]
      parts.push(data)
    end
    type = parts[0]
    raise ArgumentError, &quot;Unsupported key type #{type}&quot; unless type == &quot;ssh-rsa&quot;
    e = parts[1].bytes.inject do |a, b|
      (a &lt;&lt; 8) + b
    end
    n = parts[2].bytes.inject do |a, b|
      (a &lt;&lt; 8) + b
    end
    rsakey.n = n
    rsakey.e = e
  end
  rsakey
end

def read_file file
  f = open_file file, &#39;r&#39;
  f.read
end
  
def open_file file, mode
  case file
  when String
    File.open file, mode
  when File, IO
    file
  else
    raise ArgumentError, &quot;Invalid file #{file}&quot;
  end
end</code></pre></noscript></div>
</p>

<p>Focus on one function <code>load_ssh_pubkey</code>. It does a non trivial thing
(at least not for me) which is parsing and building a
RSA public key from an ssh key.</p>

<p>It works. But the problem here is that it is really hard to follow, the fact that the key
loading part is using a <em>while there is data to be read</em> does not state with clarity how long
the reading is going to happen.</p>

<p>There are many <em>byte.injects</em>, one that starts explicitly in 0, the others don&rsquo;t, but why?.
It is also assuming that more than one line is going to be read from the file/text, but the
function will return only the last one, which is not clearly stated.</p>

<p>It also checks if the key type is ssh-rsa, which is also checked in the caller
method, right in the middle of the parsing part, where work is being performed.</p>

<p>And then finally it builds the key to deliver it back.</p>

<p>It is really hard to follow. This code is not telling a story, it is surviving the input
data, delivering a key as a side effect if it is not killed in the way.</p>

<p>It is not clean code at all.</p>

<h2> Let&rsquo;s try again</h2>

<p>Extracted from the <em>rebuild</em> branch:</p>

<p><div><script src='https://gist.github.com/a3e8b58418bbe03af518.js?file=ssh_key.rb'></script>
<noscript><pre><code>class SSHKey

  attr_reader :rsa

  def initialize(args={})
    source_file = args.fetch(:file) { fail ArgumentError, &quot;Filename is required&quot; }
    source = if source_file.respond_to?(:read)
               source_file.read()
             else
               File.open(source_file) do |file|
                 file.read()
               end
             end
    @rsa = load_ssh_rsa_key(source)
    @rsa ||= OpenSSL::PKey.read(source)
  end

  private

  def load_ssh_rsa_key(source)
    fail &quot;DSA is not supported&quot; if source =~ /^ssh-dsa/
    return nil unless source =~ /^ssh-rsa/

    keydata = decode_key(source)

    skip_key_type_length = parse_data(keydata.slice!(0, 4))
    keydata.slice!(0, skip_key_type_length)

    rsakey = OpenSSL::PKey::RSA.new
    exponent_length = parse_data(keydata.slice!(0, 4))
    rsakey.e = parse_data(keydata.slice!(0, exponent_length))

    modulus_length = parse_data(keydata.slice!(0, 4))
    rsakey.n = parse_data(keydata.slice!(0, modulus_length))

    @rsa = rsakey
  end

  def decode_key(source)
    base64 = source.chomp.split[1]
    keydata = base64.unpack(&quot;m&quot;).first
    keydata
  end

  def parse_data(data)
    data.bytes.inject(0) do |sum, byte|
      (sum &lt;&lt; 8) + byte
    end
  end

end</code></pre></noscript></div>
</p>

<p>In this case I&rsquo;m trying to follow Avdi&rsquo;s ideas: readability and telling a story matters.
Given that I&rsquo;m in the process of turning this <a href="https://github.com/pcarranza/zssl">console tool</a>
into a gem that I can actually export I prefer creating an object that will know how to
handle this ssh key loading instead of a function in a module.</p>

<p>Let&rsquo;s check what goes on in the <code>load_ssh_rsa_key</code> method:</p>

<ul>
<li>It fails if it gets an DSA key because it is not supported.</li>
<li>The key is decoded in another method.</li>
<li>There are 3 chunks of data: key type, exponent and modulus.</li>
<li>The first 4 bytes are the size of the chunk data.</li>
<li>With that we can build an RSA key, and that is how it is stored in the ssh key file.</li>
</ul>


<p>Much, much better, I can understand what it does in one read, there are no surprises in that code.</p>

<p>Thanks Avdi.</p>
]]></content>
  </entry>
  
</feed>
